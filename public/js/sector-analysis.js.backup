// Sector Analysis - handles sector-wide analysis display
const SectorAnalysis = {
  init() {
    this.fetchSectorAnalysis();
    this.fetchSeasonalAnalysis();
  },

  async fetchSectorAnalysis() {
    const analysisContainer = document.getElementById('technical-analysis');
    analysisContainer.innerHTML = '<h3>기술적 분석 (종합 지표)</h3>';

    const resultsGrid = document.createElement('div');
    resultsGrid.className = 'results-grid';
    analysisContainer.appendChild(resultsGrid);

    for (const [sectorName, ticker] of Object.entries(CONFIG.sectorETFs)) {
      try {
        const response = await fetch(`${CONFIG.endpoints.analysis}/${ticker}`);
        if (!response.ok) {
          throw new Error(`Failed to fetch analysis for ${ticker}`);
        }
        const data = await response.json();
        this.displayAnalysisResult(resultsGrid, sectorName, data);
      } catch (error) {
        console.error(`Error fetching analysis for ${sectorName} (${ticker}):`, error);
        this.displayAnalysisError(resultsGrid, sectorName);
      }
    }
  },

  async fetchSeasonalAnalysis() {
    const seasonalContainer = document.getElementById('seasonal-analysis');
    seasonalContainer.innerHTML = '<h3>시기적 분석 (월별 평균 수익률)</h3>';

    const resultsGrid = document.createElement('div');
    resultsGrid.className = 'results-grid';
    seasonalContainer.appendChild(resultsGrid);

    for (const [sectorName, ticker] of Object.entries(CONFIG.sectorETFs)) {
      try {
        const response = await fetch(`${CONFIG.endpoints.seasonal}/${ticker}`);
        if (!response.ok) {
          throw new Error(`Failed to fetch seasonal analysis for ${ticker}`);
        }
        const data = await response.json();
        this.displaySeasonalAnalysisResult(resultsGrid, sectorName, data);
      } catch (error) {
        console.error(`Error fetching seasonal analysis for ${sectorName} (${ticker}):`, error);
        this.displayAnalysisError(resultsGrid, sectorName);
      }
    }
  },

  displayAnalysisResult(container, sectorName, data) {
    const resultDiv = document.createElement('div');
    resultDiv.className = 'analysis-result';

    let signalClass = '';
    if (data.signal === 'Buy') {
      signalClass = 'signal-buy';
    } else if (data.signal === 'Sell') {
      signalClass = 'signal-sell';
    }

    // Enhanced display with new indicators
    resultDiv.innerHTML = `
      <h4>${sectorName} (${data.ticker})</h4>
      <p><span class="tooltip-term" data-term="50-day SMA">50일 SMA</span>: $${data.sma50 || 'N/A'}</p>
      <p><span class="tooltip-term" data-term="200-day SMA">200일 SMA</span>: $${data.sma200 || 'N/A'}</p>
      ${data.rsi ? `<p><span class="tooltip-term" data-term="RSI">RSI</span>: ${data.rsi}</p>` : ''}
      <p><span class="tooltip-term" data-term="신뢰도">신뢰도</span>: ${data.confidence || 'N/A'}</p>
      <p>Signal: <span class="signal ${signalClass} tooltip-term" data-term="${data.signal}">${data.signal}</span></p>
    `;
    container.appendChild(resultDiv);
  },

  displaySeasonalAnalysisResult(container, sectorName, data) {
    const resultDiv = document.createElement('div');
    resultDiv.className = 'analysis-result';

    resultDiv.innerHTML = `
      <h4>${sectorName} (${data.ticker})</h4>
      <p><span class="tooltip-term" data-term="Best Month">Best Month</span>: ${data.bestMonth || 'N/A'}</p>
      <p><span class="tooltip-term" data-term="Worst Month">Worst Month</span>: ${data.worstMonth || 'N/A'}</p>
    `;
    container.appendChild(resultDiv);
  },

  displayAnalysisError(container, sectorName) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'analysis-result';
    errorDiv.innerHTML = `<h4>${sectorName}</h4><p>Error loading analysis.</p>`;
    container.appendChild(errorDiv);
  }
};
